package routines;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.lang.Integer;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class BusinessRules {
    
	
	public static boolean isNotNull(Object arg){
	    boolean isNotNull = (arg != null && !arg.equals("null")) ;
	    if (isNotNull)
	        isNotNull &= (arg.toString().trim().length() != 0);
	    return isNotNull;
	}
	
	public static boolean isNumeric(String arg){
	    
		boolean valid = true;
		valid = isNotNull(arg);
	    
	    try {
	        double d = Double.parseDouble(arg);
	    
	    }catch (NumberFormatException nfe) {
	        return false;
	    }
	    
	    return valid;
	    
	}
	
	public static boolean isDate(String dateStr) {
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        
        try {
            sdf.parse(dateStr);
        
        } catch (ParseException e) {
            return false;
        
        }
        return true;
    }
	
	public static boolean is2DateValid(String date1, String date2) {
        
		boolean date1_null = isNotNull(date1);
		boolean date2_null = isNotNull(date2);
		
		if(date1_null && date2_null) {
			boolean date1_Format = isDate(date1);
			boolean date2_Format = isDate(date2);
        	return (date1_Format && date2_Format);
		} else {
        	return false;
        }

    }
	
	public static boolean isCCRCompleteAndValid(String date1, String date2, String date3) {
        
		boolean date1_null = isNotNull(date1);
		boolean date2_null = isNotNull(date2);
		boolean date3_null = isNotNull(date3);
		
        
		if(date1_null && date2_null && date3_null) {
			boolean date1_Format = isDate(date1);
			boolean date2_Format = isDate(date2);
			boolean date3_Format = isDate(date3);
			return (date1_Format && date2_Format && date3_Format);
        
		} else {
        	return false;
        }

    }
	
	public static int CCR_DAYS_BR(String dcomp, String proj_charges_settled, String app_ready_con) {
		Date proj_charges_settled_date = parseDate(proj_charges_settled);
		Date app_ready_con_date = parseDate(app_ready_con);
		Date dcomp_date =parseDate(dcomp);
		Date max = (int)TalendDate.diffDate(proj_charges_settled_date, app_ready_con_date, "dd") >= 0 ? proj_charges_settled_date:app_ready_con_date;
		return (int)TalendDate.diffDateFloor(dcomp_date, max, "dd");
	}
	
	public static int APT_WORA_DAYS_BR(String proj_charges_settled, String app_ready_con, String authzd) {
		Date proj_charges_settled_date = parseDate(proj_charges_settled);
		Date app_ready_con_date = parseDate(app_ready_con);
		Date authzd_date = parseDate(authzd);
		Date max = (int)TalendDate.diffDate(proj_charges_settled_date, app_ready_con_date, "dd") >= 0 ? proj_charges_settled_date:app_ready_con_date;
		return (int)TalendDate.diffDateFloor(max, authzd_date, "dd");
	}
	
	public static Date parseDate(Object date) {
		boolean match =  isNotNull(date);
		
		if (match) {
			String date1 = date.toString();
			return isDate(date1)?TalendDate.parseDate("yyyy-MM-dd",date1):TalendDate.getCurrentDate();
		}
		else
		{
			return TalendDate.getCurrentDate();
		}
		
	}
	public static Date parseDateFormat(Object date) {
		boolean match =  isNotNull(date);
		if (match) {
			String date1 = date.toString();
			return isDate(date1)?TalendDate.parseDate("yyyyMMdd",date1):TalendDate.getCurrentDate();
		}
		else
		{
			return TalendDate.getCurrentDate();
		}
	}
	
	public static String projectType(Object project_type) {
		boolean project_type_complete = isNotNull(project_type);
		if(project_type_complete) {
			String project_type_string= project_type.toString();
			return project_type_string.matches("(Feasibility)")?"None":project_type_string;
		}
		else
			return "None";
	}
	
	public static String pendingWithMeralcoTag(Object recordtype, Object pendingtag, Object generalstatus, Object responsible) {
	boolean match = isNotNull(recordtype) && isNotNull(pendingtag) && isNotNull(generalstatus) && isNotNull(responsible);
	if (match) {
		String recordtypeString = recordtype.toString();
		String pendingtagString = pendingtag.toString();
		String generalstatusString = generalstatus.toString();
		String responsibleString = responsible.toString();
		if (recordtypeString.equals("OSA")){
			boolean pendingTagIsNull = !isNotNull(pendingtagString);
			if(pendingTagIsNull) {
				return "Unknown";
			}
		}else {
			boolean generatstatusispipeline = generalstatusString.equals("PIPELINE");
			if(generatstatusispipeline) {
				return "Pending with".concat(responsibleString);
			}
			else {
				return "Completed";
			}
		}
	}
	return "Unknown";	
	}
	
	public static float FMo_PROJECTED_KWH(String KWH){
		boolean match =   isNotNull(KWH);
		
		if (match) {
			float kwh_float = Float.parseFloat(KWH);
			return (float)kwh_float * 30;
		}
		
		else {
			return Float.parseFloat("0");
		}
		
	}
	
	public static float FMo_EST_BILLED_REV(Object CRS_ORG_LEVEL_2, Object APPLIED_LOAD, Object KWH){
		boolean match =  isNotNull(CRS_ORG_LEVEL_2) && isNotNull(APPLIED_LOAD) && isNotNull(KWH);
		
		if (match) {
			String CRS_ORG_LEVEL_2_STRING = CRS_ORG_LEVEL_2.toString();
			Double APPLIED_LOAD_STRING = Double.valueOf(APPLIED_LOAD.toString());
			Double KWH_STRING =  Double.valueOf(KWH.toString());
			float val = Integer.valueOf("0").floatValue();
			if (CRS_ORG_LEVEL_2_STRING == "BIZ" || CRS_ORG_LEVEL_2_STRING == "CBG"){
				if (APPLIED_LOAD_STRING.floatValue()* (float)0.7 >= (float)500) {
					val = KWH_STRING.floatValue() * (float)30 * (float)7.42;
				}
				else if (APPLIED_LOAD_STRING.doubleValue() * 0.7 >= 40) {
					val = KWH_STRING.floatValue() * (float)30 * (float)9.75;
				}
				else if (APPLIED_LOAD_STRING.floatValue() * 0.7 < 40) {
					val = KWH_STRING.floatValue() * (float)30 * (float)10.08;
				}
			}
			
			else {
				val = KWH_STRING.floatValue() * (float)30 * (float)10.50;
			}
			return val;
		}
		
		else {
			return Float.parseFloat("0");	
		}
	}

	public static float FMo_EST_DIST_REV(Object CRS_ORG_LEVEL_2, Object APPLIED_LOAD, Object kwh){
		boolean match =  isNotNull(CRS_ORG_LEVEL_2) && isNotNull(APPLIED_LOAD) && isNotNull(kwh);
		
		if (match) {
			String kwhString = kwh.toString();
			Double APPLIED_LOAD_STRING = Double.valueOf(APPLIED_LOAD.toString());
			float kwh_float = Float.parseFloat(kwhString);
			int APPLIED_LOAD_int = Integer.parseInt(APPLIED_LOAD_STRING);
			float val = Integer.valueOf("0").floatValue();
			if (CRS_ORG_LEVEL_2 == "BIZ" || CRS_ORG_LEVEL_2 == "CBG"){
				if (APPLIED_LOAD_int * 0.7 >= 500) {
					val = ((kwh_float * (float)30 * (float)7.42) * (float)0.08);
				}
				else if (APPLIED_LOAD_int * 0.7 >= 40) {
					val = ((kwh_float * (float)30 * (float)9.75) * (float)0.16);
				}
				else if (APPLIED_LOAD_int * 0.7 < 40) {
					val = ((kwh_float * (float)30 * (float)10.08) * (float)0.21);
				}
			}
			
			else {
			val = (kwh_float * (float)30 * (float)2.5);
			}
			return val;
		}
		else {
			return Float.parseFloat("0");
		}
		
	}
}
